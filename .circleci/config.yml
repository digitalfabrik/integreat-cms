version: 2.1

orbs:
  shellcheck: circleci/shellcheck@2.2.3
jobs:
  pipenv-install:
    docker:
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-deps-{{ checksum "Pipfile.lock" }}
            - pip-deps-
      - run:
          name: Install pip dependencies
          command: pipenv install --dev
      - save_cache:
          key: pip-deps-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv
      - persist_to_workspace:
          root: .
          paths:
            - .venv
            - src/integreat_cms.egg-info
  npm-install:
    docker:
        - image: cimg/node:current
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
            - npm-deps-
      - run:
          name: Install npm dependencies
          command: npm install
      - save_cache:
          key: npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
  pylint:
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run pylint
          command: pipenv run pylint_runner
  black:
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check black code style
          command: pipenv run black --check .
  tests:
    docker:
      - image: circleci/python:3.7
      - image: circleci/postgres:alpine
        environment:
          POSTGRES_USER: integreat
          POSTGRES_DB: integreat
          POSTGRES_PASSWORD: password
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Migrate database
          command: |
            pipenv run integreat-cms-cli makemigrations cms --settings=backend.circleci_settings
            pipenv run integreat-cms-cli migrate --settings=backend.circleci_settings
      - run:
          name: Run tests
          command: pipenv run integreat-cms-cli test cms --set=COVERAGE --settings=backend.circleci_settings
      - store_artifacts:
          path: htmlcov
  check-translations:
    docker:
      - image: integreat/python-node-gettext:78c07dc
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check translation file for missing or empty entries
          command: ./dev-tools/check_translations.sh
  bundle-static-files:
    docker:
      - image: integreat/python-node-gettext:78c07dc
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Compile CSS and JS
          command: npm run prod
      - run:
          name: Compile translation file
          command: |
            cd src/cms
            pipenv run integreat-cms-cli compilemessages --settings=backend.circleci_settings
      - persist_to_workspace:
          root: .
          paths:
            - src/cms/static
            - src/cms/locale/de/LC_MESSAGES/django.mo
            - webpack-stats.json
  packaging:
    docker:
      - image: integreat/bionic-setuptools:78c07dc
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create integreat-cms package
          command: python3 setup.py --command-packages=stdeb.command bdist_deb
      - store_artifacts:
          path: dist
  build-documentation:
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Generate documentation
          command: pipenv run ./dev-tools/generate_documentation.sh
      - persist_to_workspace:
          root: .
          paths:
            - docs
  deploy-documentation:
    docker:
        - image: circleci/python:3.7
    resource_class: small
    environment:
      BRANCH: gh-pages
      DOC_DIR: docs
      TMP_DIR: .gh-pages
    steps:
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: 8f:d7:a2:cb:47:e2:cf:9b:78:44:86:6d:4e:44:11:54
      - run:
          name: Add GitHub's Public SSH Key to known hosts
          command: echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - run:
          name: Prepare git config
          command: |
            git config --global user.name IntegreatAPI
            git config --global user.email 41921676+IntegreatAPI@users.noreply.github.com
      - run:
          name: Clone existing gh-pages branch into temporary directory
          command: git clone --depth=1 $CIRCLE_REPOSITORY_URL -b $BRANCH $TMP_DIR
      - run:
          when: on_fail
          name: Initialize gh-pages branch in new temporary git directory
          command: |
            git init $TMP_DIR
            cd $TMP_DIR
            git remote add origin $CIRCLE_REPOSITORY_URL
            git checkout -b $BRANCH
      - run:
          name: Copy documentation into temporary directory
          command: |
            rm -rfv ${TMP_DIR}/*
            cp -Rv ${TMP_DIR}/../${DOC_DIR}/. $TMP_DIR
      - run:
          name: Push documentation to GitHub Pages
          command: |
            cd $TMP_DIR
            git add --all
            git commit -m "Update documentation of commit ${CIRCLE_SHA1} [skip ci]" || true
            git push origin $BRANCH
  docker-images:
    docker:
        - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker images
          command: |
            if git diff --name-only HEAD~1 HEAD | grep -q .circleci/images/bionic-setuptools; then
                docker build -t integreat/bionic-setuptools:$(echo $CIRCLE_SHA1 | cut -c -7) -t integreat/bionic-setuptools:latest .circleci/images/bionic-setuptools
            fi
            if git diff --name-only HEAD~1 HEAD | grep -q .circleci/images/python-node-gettext; then
                docker build -t integreat/python-node-gettext:$(echo $CIRCLE_SHA1 | cut -c -7) -t integreat/python-node-gettext:latest .circleci/images/python-node-gettext
            fi
      - run:
          name: Push Docker images
          command: |
            if git diff --name-only HEAD~1 HEAD | grep -q .circleci/images; then
                echo $DOCKER_PASSWORD | docker login -u integreat --password-stdin
            fi
            if git diff --name-only HEAD~1 HEAD | grep -q .circleci/images/bionic-setuptools; then
                docker push integreat/bionic-setuptools
            fi
            if git diff --name-only HEAD~1 HEAD | grep -q .circleci/images/python-node-gettext; then
                docker push integreat/python-node-gettext
            fi

workflows:
  main:
    jobs:
      - pipenv-install
      - npm-install
      - pylint:
          requires:
            - pipenv-install
      - black:
          requires:
            - pipenv-install
      - check-translations:
          requires:
            - pipenv-install
      - bundle-static-files:
          requires:
            - pipenv-install
            - npm-install
      - tests:
          requires:
            - bundle-static-files
      - packaging:
          requires:
            - bundle-static-files
      - build-documentation:
          requires:
            - pipenv-install
      - deploy-documentation:
          requires:
            - build-documentation
          filters:
            branches:
              only: develop
      - docker-images:
          context: docker-hub
          filters:
            branches:
              ignore: /^dependabot\/.*/
      - shellcheck/check:
          dir: ./dev-tools
          external_sources: true
